// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PrizeProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("controller", Value.fromBytes(Bytes.empty()));
    this.set("drawingPeriod", Value.fromBigInt(BigInt.zero()));
    this.set("minimumDeposit", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("tokenName", Value.fromString(""));
    this.set("tokenSymbol", Value.fromString(""));
    this.set("cToken", Value.fromBytes(Bytes.empty()));
    this.set("cTokenName", Value.fromString(""));
    this.set("cTokenSymbol", Value.fromString(""));
    this.set("nativeToken", Value.fromBytes(Bytes.empty()));
    this.set("nativeTokenName", Value.fromString(""));
    this.set("nativeTokenSymbol", Value.fromString(""));
    this.set("ticket", Value.fromBytes(Bytes.empty()));
    this.set("ticketName", Value.fromString(""));
    this.set("ticketSymbol", Value.fromString(""));
    this.set("amountDeposited", Value.fromBigInt(BigInt.zero()));
    this.set("reserve", Value.fromBigInt(BigInt.zero()));
    this.set("prizePool", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PrizeProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PrizeProtocol entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PrizeProtocol", id.toString(), this);
    }
  }

  static load(id: string): PrizeProtocol | null {
    return changetype<PrizeProtocol | null>(store.get("PrizeProtocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get controller(): Bytes {
    let value = this.get("controller");
    return value!.toBytes();
  }

  set controller(value: Bytes) {
    this.set("controller", Value.fromBytes(value));
  }

  get drawingPeriod(): BigInt {
    let value = this.get("drawingPeriod");
    return value!.toBigInt();
  }

  set drawingPeriod(value: BigInt) {
    this.set("drawingPeriod", Value.fromBigInt(value));
  }

  get minimumDeposit(): BigInt {
    let value = this.get("minimumDeposit");
    return value!.toBigInt();
  }

  set minimumDeposit(value: BigInt) {
    this.set("minimumDeposit", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value!.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    return value!.toString();
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get cToken(): Bytes {
    let value = this.get("cToken");
    return value!.toBytes();
  }

  set cToken(value: Bytes) {
    this.set("cToken", Value.fromBytes(value));
  }

  get cTokenName(): string {
    let value = this.get("cTokenName");
    return value!.toString();
  }

  set cTokenName(value: string) {
    this.set("cTokenName", Value.fromString(value));
  }

  get cTokenSymbol(): string {
    let value = this.get("cTokenSymbol");
    return value!.toString();
  }

  set cTokenSymbol(value: string) {
    this.set("cTokenSymbol", Value.fromString(value));
  }

  get nativeToken(): Bytes {
    let value = this.get("nativeToken");
    return value!.toBytes();
  }

  set nativeToken(value: Bytes) {
    this.set("nativeToken", Value.fromBytes(value));
  }

  get nativeTokenName(): string {
    let value = this.get("nativeTokenName");
    return value!.toString();
  }

  set nativeTokenName(value: string) {
    this.set("nativeTokenName", Value.fromString(value));
  }

  get nativeTokenSymbol(): string {
    let value = this.get("nativeTokenSymbol");
    return value!.toString();
  }

  set nativeTokenSymbol(value: string) {
    this.set("nativeTokenSymbol", Value.fromString(value));
  }

  get ticket(): Bytes {
    let value = this.get("ticket");
    return value!.toBytes();
  }

  set ticket(value: Bytes) {
    this.set("ticket", Value.fromBytes(value));
  }

  get ticketName(): string {
    let value = this.get("ticketName");
    return value!.toString();
  }

  set ticketName(value: string) {
    this.set("ticketName", Value.fromString(value));
  }

  get ticketSymbol(): string {
    let value = this.get("ticketSymbol");
    return value!.toString();
  }

  set ticketSymbol(value: string) {
    this.set("ticketSymbol", Value.fromString(value));
  }

  get amountDeposited(): BigInt {
    let value = this.get("amountDeposited");
    return value!.toBigInt();
  }

  set amountDeposited(value: BigInt) {
    this.set("amountDeposited", Value.fromBigInt(value));
  }

  get reserve(): BigInt {
    let value = this.get("reserve");
    return value!.toBigInt();
  }

  set reserve(value: BigInt) {
    this.set("reserve", Value.fromBigInt(value));
  }

  get prizePool(): BigInt {
    let value = this.get("prizePool");
    return value!.toBigInt();
  }

  set prizePool(value: BigInt) {
    this.set("prizePool", Value.fromBigInt(value));
  }

  get lotteries(): Array<string> {
    let value = this.get("lotteries");
    return value!.toStringArray();
  }

  set lotteries(value: Array<string>) {
    this.set("lotteries", Value.fromStringArray(value));
  }

  get players(): Array<string> | null {
    let value = this.get("players");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set players(value: Array<string> | null) {
    if (!value) {
      this.unset("players");
    } else {
      this.set("players", Value.fromStringArray(<Array<string>>value));
    }
  }

  get wins(): Array<string> | null {
    let value = this.get("wins");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set wins(value: Array<string> | null) {
    if (!value) {
      this.unset("wins");
    } else {
      this.set("wins", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Lottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("protocol", Value.fromString(""));
    this.set("state", Value.fromString(""));
    this.set("startTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("amountDeposited", Value.fromBigInt(BigInt.zero()));
    this.set("reserve", Value.fromBigInt(BigInt.zero()));
    this.set("prizePool", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lottery entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Lottery entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Lottery", id.toString(), this);
    }
  }

  static load(id: string): Lottery | null {
    return changetype<Lottery | null>(store.get("Lottery", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    return value!.toBigInt();
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt | null {
    let value = this.get("endTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("endTimestamp");
    } else {
      this.set("endTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountDeposited(): BigInt {
    let value = this.get("amountDeposited");
    return value!.toBigInt();
  }

  set amountDeposited(value: BigInt) {
    this.set("amountDeposited", Value.fromBigInt(value));
  }

  get reserve(): BigInt {
    let value = this.get("reserve");
    return value!.toBigInt();
  }

  set reserve(value: BigInt) {
    this.set("reserve", Value.fromBigInt(value));
  }

  get prizePool(): BigInt {
    let value = this.get("prizePool");
    return value!.toBigInt();
  }

  set prizePool(value: BigInt) {
    this.set("prizePool", Value.fromBigInt(value));
  }

  get win(): string | null {
    let value = this.get("win");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set win(value: string | null) {
    if (!value) {
      this.unset("win");
    } else {
      this.set("win", Value.fromString(<string>value));
    }
  }

  get players(): Array<string> | null {
    let value = this.get("players");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set players(value: Array<string> | null) {
    if (!value) {
      this.unset("players");
    } else {
      this.set("players", Value.fromStringArray(<Array<string>>value));
    }
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (!value) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get redeems(): Array<string> | null {
    let value = this.get("redeems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set redeems(value: Array<string> | null) {
    if (!value) {
      this.unset("redeems");
    } else {
      this.set("redeems", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("protocol", Value.fromString(""));
    this.set("lottery", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Player entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    return value!.toString();
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get redeems(): Array<string> | null {
    let value = this.get("redeems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set redeems(value: Array<string> | null) {
    if (!value) {
      this.unset("redeems");
    } else {
      this.set("redeems", Value.fromStringArray(<Array<string>>value));
    }
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("protocol", Value.fromString(""));
    this.set("lottery", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Deposit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    return value!.toString();
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("protocol", Value.fromString(""));
    this.set("lottery", Value.fromString(""));
    this.set("from", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redeem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Redeem entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Redeem", id.toString(), this);
    }
  }

  static load(id: string): Redeem | null {
    return changetype<Redeem | null>(store.get("Redeem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    return value!.toString();
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Win extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("winner", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("protocol", Value.fromString(""));
    this.set("lottery", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Win entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Win entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Win", id.toString(), this);
    }
  }

  static load(id: string): Win | null {
    return changetype<Win | null>(store.get("Win", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get winner(): string {
    let value = this.get("winner");
    return value!.toString();
  }

  set winner(value: string) {
    this.set("winner", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    return value!.toString();
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get lottery(): string {
    let value = this.get("lottery");
    return value!.toString();
  }

  set lottery(value: string) {
    this.set("lottery", Value.fromString(value));
  }
}
